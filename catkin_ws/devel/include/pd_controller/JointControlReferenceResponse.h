// Generated by gencpp from file pd_controller/JointControlReferenceResponse.msg
// DO NOT EDIT!


#ifndef PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCERESPONSE_H
#define PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pd_controller
{
template <class ContainerAllocator>
struct JointControlReferenceResponse_
{
  typedef JointControlReferenceResponse_<ContainerAllocator> Type;

  JointControlReferenceResponse_()
    : theta1(0.0)
    , theta2(0.0)
    , d3(0.0)  {
    }
  JointControlReferenceResponse_(const ContainerAllocator& _alloc)
    : theta1(0.0)
    , theta2(0.0)
    , d3(0.0)  {
  (void)_alloc;
    }



   typedef double _theta1_type;
  _theta1_type theta1;

   typedef double _theta2_type;
  _theta2_type theta2;

   typedef double _d3_type;
  _d3_type d3;





  typedef boost::shared_ptr< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlReferenceResponse_

typedef ::pd_controller::JointControlReferenceResponse_<std::allocator<void> > JointControlReferenceResponse;

typedef boost::shared_ptr< ::pd_controller::JointControlReferenceResponse > JointControlReferenceResponsePtr;
typedef boost::shared_ptr< ::pd_controller::JointControlReferenceResponse const> JointControlReferenceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator1> & lhs, const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.theta1 == rhs.theta1 &&
    lhs.theta2 == rhs.theta2 &&
    lhs.d3 == rhs.d3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator1> & lhs, const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pd_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9890b1bf53393af30e276affd5468a4b";
  }

  static const char* value(const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9890b1bf53393af3ULL;
  static const uint64_t static_value2 = 0x0e276affd5468a4bULL;
};

template<class ContainerAllocator>
struct DataType< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pd_controller/JointControlReferenceResponse";
  }

  static const char* value(const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 theta1\n"
"float64 theta2\n"
"float64 d3\n"
"\n"
;
  }

  static const char* value(const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta1);
      stream.next(m.theta2);
      stream.next(m.d3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlReferenceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pd_controller::JointControlReferenceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pd_controller::JointControlReferenceResponse_<ContainerAllocator>& v)
  {
    s << indent << "theta1: ";
    Printer<double>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<double>::stream(s, indent + "  ", v.theta2);
    s << indent << "d3: ";
    Printer<double>::stream(s, indent + "  ", v.d3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PD_CONTROLLER_MESSAGE_JOINTCONTROLREFERENCERESPONSE_H
